// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import output "github.com/jiwen624/logspout/output"

// Output is an autogenerated mock type for the Output type
type Output struct {
	mock.Mock
}

// Activate provides a mock function with given fields:
func (_m *Output) Activate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deactivate provides a mock function with given fields:
func (_m *Output) Deactivate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *Output) ID() output.ID {
	ret := _m.Called()

	var r0 output.ID
	if rf, ok := ret.Get(0).(func() output.ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(output.ID)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *Output) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *Output) Type() output.Type {
	ret := _m.Called()

	var r0 output.Type
	if rf, ok := ret.Get(0).(func() output.Type); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(output.Type)
	}

	return r0
}

// Write provides a mock function with given fields: p
func (_m *Output) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
